input { stdin {} }

filter {
	
	# DEFINE THE COLUMNS OF THE CSV
	csv {
		columns => ["Year","Quarter","Month","DayofMonth","DayOfWeek","FlightDate","UniqueCarrier","AirlineID","Carrier","TailNum","FlightNum","OriginAirportID","OriginAirportSeqID","OriginCityMarketID","Origin","OriginCityName","OriginState","OriginStateFips","OriginStateName","OriginWac","DestAirportID","DestAirportSeqID","DestCityMarketID","Dest","DestCityName","DestState","DestStateFips","DestStateName","DestWac","CRSDepTime","DepTime","DepDelay","DepDelayMinutes","DepDel15","DepartureDelayGroups","DepTimeBlk","TaxiOut","WheelsOff","WheelsOn","TaxiIn","CRSArrTime","ArrTime","ArrDelay","ArrDelayMinutes","ArrDel15","ArrivalDelayGroups","ArrTimeBlk","Cancelled","CancellationCode","Diverted","CRSElapsedTime","ActualElapsedTime","AirTime","Flights","Distance","DistanceGroup","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay","FirstDepTime","TotalAddGTime","LongestAddGTime","DivAirportLandings","DivReachedDest","DivActualElapsedTime","DivArrDelay","DivDistance","Div1Airport","Div1AirportID","Div1AirportSeqID","Div1WheelsOn","Div1TotalGTime","Div1LongestGTime","Div1WheelsOff","Div1TailNum","Div2Airport","Div2AirportID","Div2AirportSeqID","Div2WheelsOn","Div2TotalGTime","Div2LongestGTime","Div2WheelsOff","Div2TailNum","Div3Airport","Div3AirportID","Div3AirportSeqID","Div3WheelsOn","Div3TotalGTime","Div3LongestGTime","Div3WheelsOff","Div3TailNum","Div4Airport","Div4AirportID","Div4AirportSeqID","Div4WheelsOn","Div4TotalGTime","Div4LongestGTime","Div4WheelsOff","Div4TailNum","Div5Airport","Div5AirportID","Div5AirportSeqID","Div5WheelsOn","Div5TotalGTime","Div5LongestGTime","Div5WheelsOff","Div5TailNum"]
	}

    # DROP UNNEEDED RECORDS ASAP -- TAKE ONLY TOP 5 AIRPORTS
    if [Origin] not in ["ATL", "LAX", "ORD", "DFW", "JFK"] {
        drop {}
    }
    if [Dest] not in ["ATL", "LAX", "ORD", "DFW", "JFK"] {
        drop { }
    }
	
	# REMOVE SOME UNNEEDED FIELDS
	mutate {
		remove_field => [
            "message", 
			"Div1Airport", "Div1AirportID", "Div1AirportSeqID", "Div1LongestGTime", "Div1TailNum", "Div1TotalGTime", "Div1WheelsOff", "Div1WheelsOn",
			"Div2Airport", "Div2AirportID", "Div2AirportSeqID", "Div2LongestGTime", "Div2TailNum", "Div2TotalGTime", "Div2WheelsOff", "Div2WheelsOn",
			"Div3Airport", "Div3AirportID", "Div3AirportSeqID", "Div3LongestGTime", "Div3TailNum", "Div3TotalGTime", "Div3WheelsOff", "Div3WheelsOn",
		    "Div4Airport", "Div4AirportID", "Div4AirportSeqID", "Div4LongestGTime", "Div4TailNum", "Div4TotalGTime", "Div4WheelsOff", "Div4WheelsOn",
			"Div5Airport", "Div5AirportID", "Div5AirportSeqID", "Div5LongestGTime", "Div5TailNum", "Div5TotalGTime", "Div5WheelsOff", "Div5WheelsOn",
			"DivActualElapsedTime", "DivAirportLandings", "DivArrDelay", "DivDistance", "DivReachedDest", "Diverted"
		]
	}
	
	# ATTEMPT TO MATCH DEPARTURE/DESTINATION WITH GEO COORDINATES
    geoEnrich {
        database => "lookup_data/airports.csv"
        source => "Origin"
        target => "OriginGeoPoint"
    }
    geoEnrich {
        database => "lookup_data/airports.csv"
        source => "Dest"
        target => "DestGeoPoint"
    }

    # ATTEMPT TO MATCH DEPARTURE DATE WITH DEPARTURE TIMEZONE AND APPLY TO FlightDate
    tzEnrich {
        database => "lookup_data/airports.csv"
        source => "Origin"
        target => "FlightDateTZ"
    }

    mutate {
        add_field => ["FlightDateTime", "%{FlightDate} %{CRSDepTime}"]
    }
    date {
        match => ["FlightDateTime", 'yyyy-MM-dd HHmm']
        timezone => "%{FlightDateTZ}"
        locale => en
        target => "FlightDateTime"
    }

    # OVERWRITE @timestamp WITH FlightDate (FOR CORRECT INDEX MAPPING)
    date {
        match => [ "FlightDate", "yyyy-MM-dd" ]
        timezone => "%{FlightDateTZ}"
        locale => en
        target => "@timestamp"
    }

    # ATTEMPT TO ADD WEATHER DATA
    weatherEnrich {
        database => "lookup_data/weather2.csv"
        source => "Origin"
        date => "FlightDate"
        precipitation => "precipitation"
        snowdepth => "snowdepth"
        snowfall => "snowfall"
        thunder => "thunder"
        hail => "hail"
        tmin => "tmin"
        tmax => "tmax"
        glaze => "glaze"
        damaging_wind => "damaging_wind"
        fog => "fog"
        heavy_fog => "heavy_fog"
        dust_ash => "dust_ash"
    }
    
    # COMPENSATED DELAY MINUTES CALC
    ruby {
        code => " event['CompensatedDelayMinutes'] = [event['DepDelayMinutes'].to_i - event['ArrDelayMinutes'].to_i, 0].max "
    }
    ruby {
        code => " event['DeltaDelayMinutes'] = event['DepDelayMinutes'].to_i - event['ArrDelayMinutes'].to_i "
    }
    ruby {
        code => "event['tmax'] = event['tmax'].to_i / 10 "
    }
    ruby {
        code => "event['tmin'] = event['tmin'].to_i / 10 "
    }
    ruby {
        code => "event['terribility'] = (event['snowfall'] / 10) + event['thunder'] + (event['hail'] * 3) + (event['glaze'] *2) + event['fog'] + (event['heavy_fog'] * 5) + (event['dust_ash'] * 10) "
    }


}

output {
	elasticsearch {
		index => "flights-%{+YYYY}-%{+MM}"
        # Hosts defaults to localhost
        #hosts => ""
        #user => ""
        #password => ""
	}
    #stdout { codec => json }
}
